# As config was originally based on an example by Olivier Grisel. Thanks!
# https://github.com/ogrisel/python-appveyor-demo/blob/master/appveyor.yml
clone_depth: 50

# No reason for us to restrict the number concurrent jobs
max_jobs: 100

branches:
  only:
    - master

cache:
  - '%LOCALAPPDATA%\pip\Cache'
  - 'C:\Tools\vcpkg\installed'
  - 'C:\Tools\vcpkg\packages'

platform:
  - x64

environment:
  global:
      FFTW_ROOT: "%APPVEYOR_BUILD_FOLDER%\\bin\\fftw"
      APPVEYOR_SAVE_CACHE_ON_ERROR: true
      APPVEYOR_SKIP_FINALIZE_ON_EXIT: true
      PYPI_PASSWORD:
          secure: qzj1LjjInqPzpfidSH9qaMbftLIzD9s9kWQfSZWG5KQ=
      PYPITEST_PASSWORD:
          secure: AC+ebBizFsGGHleha9J4+u21eadTMZ9cCwUzlbCYHdw=

  matrix:
    - PYTHON: C:\Python35-x64
      PYTHON_VERSION: "3.5"
      PYTHON_ARCH: "64"

    - PYTHON: C:\Python36-x64
      PYTHON_VERSION: "3.6"
      PYTHON_ARCH: "64"

    - PYTHON: C:\Python37-x64
      PYTHON_VERSION: "3.7"
      PYTHON_ARCH: "64"

init:
  - "ECHO %PYTHON% %PYTHON_VERSION% %PYTHON_ARCH%"
  - "ECHO \"%APPVEYOR_SCHEDULED_BUILD%\""
  # If there is a newer build queued for the same PR, cancel this one.
  # The AppVeyor 'rollout builds' option is supposed to serve the same
  # purpose but it is problematic because it tends to cancel builds pushed
  # directly to master instead of just PR builds (or the converse).
  # credits: JuliaLang developers.
  - ps: if ($env:APPVEYOR_PULL_REQUEST_NUMBER -and $env:APPVEYOR_BUILD_NUMBER -ne ((Invoke-RestMethod `
        https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/history?recordsNumber=50).builds | `
        Where-Object pullRequestId -eq $env:APPVEYOR_PULL_REQUEST_NUMBER)[0].buildNumber) { `
          Write-Host "There are newer queued builds for this pull request, skipping build."
          Exit-AppveyorBuild
        }
  - C:\"Program Files (x86)"\"Microsoft Visual Studio 14.0"\VC\vcvarsall.bat %PLATFORM%

install:
  - if "%PYTHON_VERSION%" == "3.5" set "BASE_PYTHON_VERSION=35"
  - if "%PYTHON_VERSION%" == "3.6" set "BASE_PYTHON_VERSION=36"
  - if "%PYTHON_VERSION%" == "3.7" set "BASE_PYTHON_VERSION=37"
  - if "%PYTHON_VERSION%" == "3.8" set "BASE_PYTHON_VERSION=38"
  - if "%PYTHON_ARCH%" == "64" set "ARCH_LABEL=-x64"
  # These are already installed on appveyor.  Update them.
  - set CONDA_ROOT=C:\Miniconda%BASE_PYTHON_VERSION%%ARCH_LABEL%
  - "ECHO %CONDA_ROOT%"
  # Get needed submodules
  - git submodule update --init --recursive

  # Activate `conda`.
  - "%CONDA_ROOT%\\Scripts\\activate.bat"
  
  # Add our channels.
  - conda config --set always_yes yes --set changeps1 no
  - conda config --add channels conda-forge
  - conda update -q conda
  - conda info -a

  # Install the required packages
  - conda install flang
  - conda install openblas
  #- conda install fftw # setup.py can't find the library
  
  # Install FFTW v3.3.5
  - echo Installing FFTW
  - ps: mkdir $env:FFTW_ROOT
  - ps: pushd $env:FFTW_ROOT
  # This downloads the windows 64-bit pre-compiled dlls
  - ps: wget ftp://ftp.fftw.org/pub/fftw/fftw-3.3.5-dll64.zip -OutFile fftw-3.3.5-dll64.zip
  - ps: 7z x fftw-3.3.5-dll64.zip
  #  - ps: pushd fftw-3.3.5-dll64
  - ps: lib /machine:x64 /def:libfftw3-3.def
  - ps: lib /machine:x64 /def:libfftw3f-3.def
  - ps: lib /machine:x64 /def:libfftw3l-3.def

  # Prepend newly installed Python to the PATH of this build (this cannot be
  # done from inside the powershell script as it would require to restart
  # the parent CMD process).
  - set PATH=%PYTHON%;%PYTHON%\Scripts;%PATH%

  # Check that we have the expected version and architecture for Python
  - python --version
  - flang --version

  - >-
     python -c "import sys,platform,struct;
     print(sys.platform, platform.machine(), struct.calcsize('P') * 8, )"

  # Upgrade to the latest pip.
  - python -m pip install -U pip setuptools wheel

  # Install the released numpy
  - pip install numpy
  - ps: |
      $NumpyDir = $((python -c 'import os; import numpy; print(os.path.dirname(numpy.__file__))') | Out-String).Trim()
      rm -r -Force "$NumpyDir\distutils"
      $tmpdir = New-TemporaryFile | %{ rm $_; mkdir $_ }
      git clone -q --depth=1 https://github.com/numpy/numpy.git $tmpdir
      mv $tmpdir\numpy\distutils $NumpyDir

build_script:
  - ps: cd SHTOOLS

  # Copy dependent DLLs
  - ps: md -Force .\build\lib.win-amd64-$env:PYTHON_VERSION\pyshtools
  - ps: cp "$env:CONDA_ROOT\Library\bin\*.dll" ".\build\lib.win-amd64-$env:PYTHON_VERSION\pyshtools"

  # Build wheel
  - pip wheel -v -v -v --wheel-dir=dist .

on_success:
  - pip install twine
  #- twine upload --username wieczor --password %PYPI_PASSWORD% --skip-existing dist/*
  - twine upload --repository-url https://test.pypi.org/legacy/ --username wieczor --password %PYPITEST_PASSWORD% --skip-existing dist/*