# As config was originally based on an example by Olivier Grisel. Thanks!
# https://github.com/ogrisel/python-appveyor-demo/blob/master/appveyor.yml
clone_depth: 50

# No reason for us to restrict the number concurrent jobs
max_jobs: 100

branches:
  only:
    - master

cache:
  - '%LOCALAPPDATA%\pip\Cache'
  - 'C:\Tools\vcpkg\installed'
  - 'C:\Tools\vcpkg\packages'

platform:
  - x64

environment:
  global:
      MINGW_32: C:\mingw-w64\i686-6.3.0-posix-dwarf-rt_v5-rev1\mingw32\bin
      MINGW_64: C:\mingw-w64\x86_64-6.3.0-posix-seh-rt_v5-rev1\mingw64\bin
      LAPACK_LIB_URL: http://icl.cs.utk.edu/lapack-for-windows/libraries/VisualStudio/3.7.0/Dynamic-MINGW/Win32/liblapack.lib
      LAPACK_DLL_URL: http://icl.cs.utk.edu/lapack-for-windows/libraries/VisualStudio/3.7.0/Dynamic-MINGW/Win32/liblapack.dll
      LAPACK_LIB: lapack.lib
      LAPACK_DLL: lapack.dll
      BLAS_LIB_URL: http://icl.cs.utk.edu/lapack-for-windows/libraries/VisualStudio/3.7.0/Dynamic-MINGW/Win32/libblas.lib
      BLAS_DLL_URL: http://icl.cs.utk.edu/lapack-for-windows/libraries/VisualStudio/3.7.0/Dynamic-MINGW/Win32/libblas.dll
      BLAS_LIB: blas.lib
      BLAS_DLL: blas.dll
      FFTW_URL: ftp://ftp.fftw.org/pub/fftw/fftw-3.3.5-dll32.zip
      FFTW_ZIP: fftw-3.3.5-dll32.zip
      NUMPY_BUILD_DEP: numpy
      CYTHON_BUILD_DEP: Cython
      PYBIND11_BUILD_DEP: pybind11
      APPVEYOR_SAVE_CACHE_ON_ERROR: true
      APPVEYOR_SKIP_FINALIZE_ON_EXIT: true
      PYPI_PASSWORD:
          secure: qzj1LjjInqPzpfidSH9qaMbftLIzD9s9kWQfSZWG5KQ=
      PYPITEST_PASSWORD:
          secure: AC+ebBizFsGGHleha9J4+u21eadTMZ9cCwUzlbCYHdw=
      BUILD_COMMIT: master

  matrix:
    - PYTHON: C:\Python36-x64
      PYTHON_VERSION: "3.6"
      PYTHON_ARCH: "64"

    - PYTHON: C:\Python37-x64
      PYTHON_VERSION: "3.7"
      PYTHON_ARCH: "64"

init:
  - "ECHO %PYTHON% %PYTHON_VERSION% %PYTHON_ARCH%"
  - "ECHO \"%APPVEYOR_SCHEDULED_BUILD%\""
  # If there is a newer build queued for the same PR, cancel this one.
  # The AppVeyor 'rollout builds' option is supposed to serve the same
  # purpose but it is problematic because it tends to cancel builds pushed
  # directly to master instead of just PR builds (or the converse).
  # credits: JuliaLang developers.
  - ps: if ($env:APPVEYOR_PULL_REQUEST_NUMBER -and $env:APPVEYOR_BUILD_NUMBER -ne ((Invoke-RestMethod `
        https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/history?recordsNumber=50).builds | `
        Where-Object pullRequestId -eq $env:APPVEYOR_PULL_REQUEST_NUMBER)[0].buildNumber) { `
          Write-Host "There are newer queued builds for this pull request, skipping build."
          Exit-AppveyorBuild
        }
  - C:\"Program Files (x86)"\"Microsoft Visual Studio 14.0"\VC\vcvarsall.bat %PLATFORM%

install:
  - cmd: echo "Filesystem root:"
  - dir C:\

  - echo "Installed SDKs:"
  - dir "C:/Program Files/Microsoft SDKs/Windows"
  
  - echo "MINGW_32"
  - dir %MINGW_32%
  - echo "MINGW_64"
  - dir %MINGW_64%

  # Get needed submodules
  - git submodule update --init --recursive

  # Install new Python if necessary
  - ps: .\multibuild\install_python.ps1

  # Prepend newly installed Python to the PATH of this build (this cannot be
  # done from inside the powershell script as it would require to restart
  # the parent CMD process).
  - set PATH=%PYTHON%;%PYTHON%\Scripts;%PATH%

  # Check that we have the expected version and architecture for Python
  - python --version
  - >-
     python -c "import sys,platform,struct;
     print(sys.platform, platform.machine(), struct.calcsize('P') * 8, )"

  #- if "%PYTHON_VERSION%" == "3.6" set "BASE_PYTHON_VERSION=36"
  #- if "%PYTHON_VERSION%" == "3.7" set "BASE_PYTHON_VERSION=37"
  #- if "%PYTHON_VERSION%" == "3.8" set "BASE_PYTHON_VERSION=38"
  #- if "%PYTHON_ARCH%" == "64" set "ARCH_LABEL=-x64"

  # These are already installed on appveyor.  Update them.
  #- set CONDA_ROOT=C:\Miniconda%BASE_PYTHON_VERSION%%ARCH_LABEL%
  #- "ECHO %CONDA_ROOT%"

  # Activate `conda`.
  #- "%CONDA_ROOT%\\Scripts\\activate.bat"

  # Add our channels.
  #- conda config --set always_yes yes --set changeps1 no
  #- conda config --add channels conda-forge
  #- conda update -q conda
  #- conda info -a

  # Install the required packages
  #- conda install flang
  #- flang --version

  # Install FFTW v3.3.5
  # Need to rename files "3-3" to just "3" as well as rename
  # libfftw3x.lib to fftw3x.lib
  - echo Installing FFTW
  - ps: mkdir fftw
  - ps: cd fftw
  - set FFTW=%APPVEYOR_BUILD_FOLDER%\fftw
  # This downloads the windows 64-bit pre-compiled dlls
  - ps: wget $env:FFTW_URL -OutFile $env:FFTW_ZIP
  - ps: 7z x $env:FFTW_ZIP
  - move libfftw3-3.dll libfftw3.dll
  - move libfftw3f-3.dll libfftw3f.dll
  - move libfftw3l-3.dll libfftw3l.dll
  - move libfftw3-3.def libfftw3.def
  - move libfftw3f-3.def libfftw3f.def
  - move libfftw3l-3.def libfftw3l.def
  - ps: lib /machine:x64 /def:libfftw3.def
  - ps: lib /machine:x64 /def:libfftw3f.def
  - ps: lib /machine:x64 /def:libfftw3l.def
  - ps: cp libfftw3.lib fftw3.lib
  - ps: cp libfftw3f.lib fftw3f.lib
  - ps: cp libfftw3l.lib fftw3l.lib
  - ps: cd ..

  # Install LAPACK and BLAS
  - echo Installing LAPACK and BLAS
  - ps: mkdir lapack
  - set LAPACK=%APPVEYOR_BUILD_FOLDER%\lapack
  - set BLAS=%APPVEYOR_BUILD_FOLDER%\lapack
  - ps: cd lapack
  - ps: wget $env:LAPACK_LIB_URL -OutFile $env:LAPACK_LIB
  - ps: wget $env:BLAS_LIB_URL -OutFile $env:BLAS_LIB
  - ps: wget $env:LAPACK_DLL_URL -OutFile $env:LAPACK_DLL
  - ps: wget $env:BLAS_DLL_URL -OutFile $env:BLAS_DLL
  # - dumpbin /SYMBOLS lapack.lib
  - ps: cd ..

  # Upgrade to the latest pip.
  - python -m pip install -U pip setuptools wheel

  # Install build requirements
  - pip install "%CYTHON_BUILD_DEP%" "%NUMPY_BUILD_DEP%" "%PYBIND11_BUILD_DEP%"

  # Replace numpy distutils with a version that can build with msvc + mingw-gfortran.
  - ps: |
      $NumpyDir = $((python -c 'import os; import numpy; print(os.path.dirname(numpy.__file__))') | Out-String).Trim()
      rm -r -Force "$NumpyDir\distutils"
      $tmpdir = New-TemporaryFile | %{ rm $_; mkdir $_ }
      git clone -q --depth=1 https://github.com/numpy/numpy.git $tmpdir
      mv $tmpdir\numpy\distutils $NumpyDir
      rm -r -Force "$NumpyDir\compat"
      mv $tmpdir\numpy\compat $NumpyDir

build_script:
  - cd %APPVEYOR_BUILD_FOLDER%\SHTOOLS
  - git checkout test

  - ps: |
      $PYTHON_ARCH = $env:PYTHON_ARCH
      If ($PYTHON_ARCH -eq 32) {
          $MINGW = $env:MINGW_32
      } Else {
          $MINGW = $env:MINGW_64
      }
      $env:Path += ";$MINGW"

  # Copy over additional DLLs to bundle to the wheels // IS THIS NECESSARY? MW
  #
  # The find commands below are mainly to find the paths where the libraries are.
  #- C:\cygwin\bin\find "C:\Program Files (x86)\Microsoft Visual Studio 14.0" -type f -name 'msvcp*.dll'
  #- C:\cygwin\bin\find "C:\Program Files (x86)\Microsoft Visual Studio 10.0" -type f -name 'msvcp*.dll'
  #- C:\cygwin\bin\find "C:\Program Files (x86)\Microsoft Visual Studio 9.0" -type f -name 'msvcp*.dll'
  # * Python 3.6
  #- mkdir build\lib.win32-3.6\pyshtools\extra-dll
  #- mkdir build\lib.win-amd64-3.6\pyshtools\extra-dll
  #- copy "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\redist\x86\Microsoft.VC140.CRT\msvcp140.dll" "build\lib.win32-3.6\pyshtools\extra-dll\"
  #- copy "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\redist\x64\Microsoft.VC140.CRT\msvcp140.dll" "build\lib.win-amd64-3.6\pyshtools\extra-dll\"
  # * Python 3.7
  #- mkdir build\lib.win32-3.7\pyshtools\extra-dll
  #- mkdir build\lib.win-amd64-3.7\pyshtools\extra-dll
  #- copy "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\redist\x86\Microsoft.VC140.CRT\msvcp140.dll" "build\lib.win32-3.7\pyshtools\extra-dll\"
  #- copy "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\redist\x64\Microsoft.VC140.CRT\msvcp140.dll" "build\lib.win-amd64-3.7\pyshtools\extra-dll\"

  # Copy dependent DLLs
  #- ps: md -Force .\build\lib.win-amd64-$env:PYTHON_VERSION\pyshtools
  #- ps: cp "$env:CONDA_ROOT\Library\bin\*.dll" ".\build\lib.win-amd64-$env:PYTHON_VERSION\pyshtools"

  # Build wheel
  - pip wheel -v -v -v --wheel-dir=dist .

on_success:
  - pip install twine
  #- twine upload --username wieczor --password %PYPI_PASSWORD% --skip-existing dist/*
  #- twine upload --repository-url https://test.pypi.org/legacy/ --username wieczor --password %PYPITEST_PASSWORD% --skip-existing dist/*