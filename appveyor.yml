# As config was originally based on an example by Olivier Grisel. Thanks!
# https://github.com/ogrisel/python-appveyor-demo/blob/master/appveyor.yml
clone_depth: 50

# No reason for us to restrict the number concurrent jobs
max_jobs: 100

branches:
  only:
    - master

cache:
  - '%LOCALAPPDATA%\pip\Cache'
  - 'C:\Tools\vcpkg\installed'
  - 'C:\Tools\vcpkg\packages'

environment: 
  global:
      APPVEYOR_SAVE_CACHE_ON_ERROR: true
      APPVEYOR_SKIP_FINALIZE_ON_EXIT: true
      CONDA_INSTALL_LOCN: C:\\Miniconda36-x64
      PYPI_PASSWORD:
          secure: iNYkwpBDR7Tpb075Zq2hjw==

  matrix:
    - PYTHON: C:\Python36-x64
      PYTHON_VERSION: 3.6
      PYTHON_ARCH: 64

    - PYTHON: C:\Python35-x64
      PYTHON_VERSION: 3.5
      PYTHON_ARCH: 64

init:
  - "ECHO %PYTHON% %PYTHON_VERSION% %PYTHON_ARCH%"
  - "ECHO \"%APPVEYOR_SCHEDULED_BUILD%\""
  # If there is a newer build queued for the same PR, cancel this one.
  # The AppVeyor 'rollout builds' option is supposed to serve the same
  # purpose but it is problematic because it tends to cancel builds pushed
  # directly to master instead of just PR builds (or the converse).
  # credits: JuliaLang developers.
  - ps: if ($env:APPVEYOR_PULL_REQUEST_NUMBER -and $env:APPVEYOR_BUILD_NUMBER -ne ((Invoke-RestMethod `
        https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/history?recordsNumber=50).builds | `
        Where-Object pullRequestId -eq $env:APPVEYOR_PULL_REQUEST_NUMBER)[0].buildNumber) { `
          Write-Host "There are newer queued builds for this pull request, skipping build."
          Exit-AppveyorBuild
        }

install:
  # Get needed submodules
  - git submodule update --init --recursive

  # Add path and activate `conda`.
  - cmd: call %CONDA_INSTALL_LOCN%\Scripts\activate.bat
  
  # Add our channels.
  - cmd: conda config --add channels defaults
  - cmd: conda config --add channels conda-forge

  # Install the required packages
  - cmd: conda install --yes flang openblas fftw

  # Prepend newly installed Python to the PATH of this build (this cannot be
  # done from inside the powershell script as it would require to restart
  # the parent CMD process).
  - SET PATH=%PYTHON%;%PYTHON%\Scripts;%PATH%

  # Check that we have the expected version and architecture for Python
  - python --version
  - flang --version
  
  - >-
     python -c "import sys,platform,struct;
     print(sys.platform, platform.machine(), struct.calcsize('P') * 8, )"

  # Upgrade to the latest pip.
  - python -m pip install -U pip setuptools wheel
  
  # Install a version of NumPy that has the required version of distutils
  # FIXME: Change this to "pip install numpy" when 1.15 is released
  # Install the released numpy
  - pip install numpy
  - ps: |
      $NumpyDir = $((python -c 'import os; import numpy; print(os.path.dirname(numpy.__file__))') | Out-String).Trim()
      rm -r -Force "$NumpyDir\distutils"
      $tmpdir = New-TemporaryFile | %{ rm $_; mkdir $_ }
      git clone -q --depth=1 https://github.com/numpy/numpy.git $tmpdir
      mv $tmpdir\numpy\distutils $NumpyDir

build_script:
  - ps: cd SHTOOLS

  # Copy dependent DLLs
  - ps: md -Force .\build\lib.win-amd64-$env:PYTHON_VERSION\pyshtools
  - ps: cp "C:\Tools\vcpkg\installed\x64-windows\bin\*.dll" ".\build\lib.win-amd64-$env:PYTHON_VERSION\pyshtools"
  - ps: cp "$env:CONDA_INSTALL_LOCN\Library\bin\*.dll" ".\build\lib.win-amd64-$env:PYTHON_VERSION\pyshtools"

  # Build wheel
  - pip wheel -v -v -v --wheel-dir=dist .

on_success:
  - pip install twine
  - twine upload --user xoviat --password %PYPI_PASSWORD% --skip-existing dist/*
